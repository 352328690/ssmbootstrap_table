package cn.com.ttblog.ssmbootstrap_table.task.job;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.quartz.DisallowConcurrentExecution;
import org.quartz.JobDataMap;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;
import org.quartz.PersistJobDataAfterExecution;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.quartz.QuartzJobBean;

@PersistJobDataAfterExecution
@DisallowConcurrentExecution
public class ExceptionJob extends QuartzJobBean {

	private static Logger LOG = LoggerFactory.getLogger(ExceptionJob.class);
	// 会初始化为0
	private int calculation;

	@Override
	protected void executeInternal(JobExecutionContext context) throws JobExecutionException {
		JobKey jobKey = context.getJobDetail().getKey();
		JobDataMap dataMap = context.getJobDetail().getJobDataMap();
		LOG.debug("dataMap：{}",ToStringBuilder.reflectionToString(dataMap.getWrappedMap()));
		Integer d=null;
		try{
			d=(Integer) dataMap.get("denominator");
		}catch(ClassCastException e){
			LOG.error("cast error！:",e);
			d=0;
		}
		int denominator =d==null?0:d;
		LOG.info("{}执行,denominator：{},calculation：{} ", jobKey, denominator,calculation);
		// a contrived example of an exception that
		// will be generated by this job due to a
		// divide by zero error (only on first run)
		try {
			calculation = 100 / denominator;
		} catch (Exception e) {
			LOG.info("job error:{}", e.getMessage());
			JobExecutionException joberr = new JobExecutionException(e);
			// fix denominator so the next time this job run
			// it won't fail again
			dataMap.put("denominator", 1);
			/**
			 * 错误处理方式1，设置正确参数立即执行
			 * 错误处理方式2，删掉所有相关的触发器，不再执行
			 */
//			joberr.setRefireImmediately(true);
			joberr.setUnscheduleAllTriggers(true);
			throw joberr;
		}
		dataMap.put("denominator", calculation);
		LOG.info("{}执行结束,denominator：{} ", jobKey, denominator);
	}

}
